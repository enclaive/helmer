name: Deploy Admin Service

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      namespace:
        required: true
        type: string
      skip_deployment:
        required: false
        type: boolean
        default: false
      aws_account_id:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy-admin:
    name: Deploy Admin
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_deployment }}
    env:
      AWS_REGION: eu-central-1
      EKS_CLUSTER_NAME: enclaive-cluster
      AWS_ACCOUNT_ID: ${{ env.aws_account_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup EKS
        uses: ./.github/actions/setup-eks
        with:
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          eks-cluster: ${{ env.EKS_CLUSTER_NAME }}
          namespace: ${{ inputs.namespace }}
      
      - name: Create ECR pull credentials
        uses: ./.github/actions/create-ecr-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-account-id: ${{ env.AWS_ACCOUNT_ID }}
          namespace: ${{ inputs.namespace }}
          secret-name: aws-ecr-creds
      
      - name: Set Admin image tag
        id: set-tag
        run: |
          ENV="${{ inputs.environment }}"
          
          # Use simple tag names
          if [ "$ENV" == "prod" ]; then
            TAG="prod"
          elif [ "$ENV" == "staging" ]; then
            TAG="staging"
          elif [ "$ENV" == "dev" ]; then
            TAG="dev"
          fi
          
          # Full ECR image path
          ECR_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/admin:${TAG}"
          
          echo "admin_tag=$TAG" >> $GITHUB_OUTPUT
          echo "admin_image=$ECR_IMAGE" >> $GITHUB_OUTPUT
          echo "ADMIN_TAG=$TAG" >> $GITHUB_ENV
          echo "ADMIN_IMAGE=$ECR_IMAGE" >> $GITHUB_ENV
          
          echo "Using image: $ECR_IMAGE"
      
      - name: Determine log settings
        id: log-settings
        run: |
          ENV="${{ inputs.environment }}"
          
          # Determine log level based on environment
          if [ "$ENV" == "prod" ]; then
            LOG_LEVEL="info"
            LOG_FORMAT="json"
          elif [ "$ENV" == "staging" ]; then
            LOG_LEVEL="info"
            LOG_FORMAT="json"
          else
            LOG_LEVEL="debug"
            LOG_FORMAT="pretty"
          fi
          
          echo "log_level=$LOG_LEVEL" >> $GITHUB_OUTPUT
          echo "log_format=$LOG_FORMAT" >> $GITHUB_OUTPUT
      
      - name: Deploy Admin
        uses: ./.github/actions/deploy-helm-chart
        with:
          service-name: admin
          chart-path: ./charts/admin
          values-file: ./charts/admin/environments/values.${{ inputs.environment }}.yaml
          namespace: ${{ inputs.namespace }}
          environment: ${{ inputs.environment }}
          image-repository: "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/admin"
          image-tag: ${{ steps.set-tag.outputs.admin_tag }}
          additional-set-values: >-
            --set namespace=${{ inputs.namespace }}
            --set domain=admin.enclaive.cloud
            --set environment=${{ inputs.environment }}
            --set logging.level=${{ steps.log-settings.outputs.log_level }}
            --set logging.format=${{ steps.log-settings.outputs.log_format }}
          timeout: 10m
      
      - name: Report Admin deployment status
        if: always()
        run: |
          NAMESPACE="${{ inputs.namespace }}"
          
          echo "=== Admin Deployment Status for ${{ inputs.environment }} ==="
          echo "Admin: $(kubectl get statefulset admin -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          
          echo "=== Admin Pod Status ==="
          kubectl get pods -n $NAMESPACE -l app=admin
          
          echo "=== Pod Details ==="
          # First check if the pod exists before trying to describe it
          if kubectl get pod admin-0 -n $NAMESPACE &>/dev/null; then
            kubectl describe pod admin-0 -n $NAMESPACE
          else
            echo "Admin pod not found. Deployment may have failed or not started yet."
          fi
          
          echo "=== Admin Service Status ==="
          kubectl get service admin -n $NAMESPACE