name: Deploy Frontend Service

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      namespace:
        required: true
        type: string
      skip_deployment:
        required: false
        type: boolean
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_deployment }}
    env:
      AWS_REGION: eu-central-1
      EKS_CLUSTER_NAME: enclaive-cluster
      AWS_ACCOUNT_ID: 886093416603
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup EKS
        uses: ./.github/actions/setup-eks
        with:
          aws-access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          eks-cluster: ${{ env.EKS_CLUSTER_NAME }}
          namespace: ${{ inputs.namespace }}
      
      - name: Create ECR pull credentials
        uses: ./.github/actions/create-ecr-credentials
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-account-id: ${{ env.AWS_ACCOUNT_ID }}
          namespace: ${{ inputs.namespace }}
          secret-name: aws-ecr-creds
      
      - name: Set Frontend image tag
        id: set-tag
        run: |
          ENV="${{ inputs.environment }}"
          
          # Use simple tag names
          if [ "$ENV" == "prod" ]; then
            TAG="prod"
          elif [ "$ENV" == "staging" ]; then
            TAG="staging"
          elif [ "$ENV" == "dev" ]; then
            TAG="dev"
          fi
          
          # Full ECR image path
          ECR_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend:${TAG}"
          
          echo "frontend_tag=$TAG" >> $GITHUB_OUTPUT
          echo "frontend_image=$ECR_IMAGE" >> $GITHUB_OUTPUT
          echo "FRONTEND_TAG=$TAG" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$ECR_IMAGE" >> $GITHUB_ENV
          
          echo "Using image: $ECR_IMAGE"
      
      
      - name: Determine log settings
        id: log-settings
        run: |
          ENV="${{ inputs.environment }}"
          
          # Determine log level based on environment
          if [ "$ENV" == "prod" ]; then
            LOG_LEVEL="info"
            LOG_FORMAT="json"
          elif [ "$ENV" == "staging" ]; then
            LOG_LEVEL="info"
            LOG_FORMAT="json"
          else
            LOG_LEVEL="debug"
            LOG_FORMAT="pretty"
          fi
          
          echo "log_level=$LOG_LEVEL" >> $GITHUB_OUTPUT
          echo "log_format=$LOG_FORMAT" >> $GITHUB_OUTPUT
      
      - name: Deploy Frontend
        uses: ./.github/actions/deploy-helm-chart
        with:
          service-name: frontend
          chart-path: ./charts/frontend
          values-file: ./charts/frontend/environments/values.${{ inputs.environment }}.yaml
          namespace: ${{ inputs.namespace }}
          environment: ${{ inputs.environment }}
          image-repository: "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend"
          image-tag: ${{ steps.set-tag.outputs.frontend_tag }}
          additional-set-values: >-
            --set namespace=${{ inputs.namespace }}
            --set domain=console.enclaive.cloud
            --set environment=${{ inputs.environment }}
            --set logging.level=${{ steps.log-settings.outputs.log_level }}
            --set logging.format=${{ steps.log-settings.outputs.log_format }}
            --set ingress.enabled=true
          timeout: 10m
      
      - name: Report Frontend deployment status
        if: always()
        run: |
          NAMESPACE="${{ inputs.namespace }}"
          
          echo "=== Frontend Deployment Status for ${{ inputs.environment }} ==="
          echo "Frontend: $(kubectl get deployment frontend -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          
          echo "=== Frontend Pod Status ==="
          kubectl get pods -n $NAMESPACE -l app=frontend || echo "No frontend pods found"
          
          echo "=== Pod Details ==="
          # Get the first pod name instead of using a fixed name pattern
          FRONTEND_POD=$(kubectl get pods -n $NAMESPACE -l app=frontend -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
          if [[ -n "$FRONTEND_POD" ]]; then
            kubectl describe pod $FRONTEND_POD -n $NAMESPACE
          else
            echo "Frontend pod not found. Deployment may have failed or not started yet."
          fi
          
          echo "=== Frontend Service Status ==="
          kubectl get service frontend -n $NAMESPACE || echo "No frontend service found"