name: Deploy Services to EKS from ECR

on:
  push:
    branches: [ main, dev, staging ]
    paths:
      - 'charts/admin/templates/**'
      - 'charts/admin/Chart.yaml'
      - 'charts/admin/values.yaml'
      - 'charts/admin/environments/*.yaml'
      - 'charts/backend/templates/**'
      - 'charts/backend/Chart.yaml'
      - 'charts/backend/values.yaml'
      - 'charts/backend/environments/*.yaml'
      - 'charts/frontend/templates/**'
      - 'charts/frontend/Chart.yaml'
      - 'charts/frontend/values.yaml'
      - 'charts/frontend/environments/*.yaml'
      - 'charts/redis/templates/**'
      - 'charts/redis/Chart.yaml'
      - 'charts/redis/values.yaml'
      - 'charts/redis/environments/*.yaml'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_admin:
        description: 'Deploy admin service'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend service'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend service'
        required: false
        default: true
        type: boolean
      deploy_redis:
        description: 'Deploy redis service'
        required: false
        default: true
        type: boolean
      check_redis_only:
        description: 'Only check if Redis exists without redeploying'
        required: false
        default: false
        type: boolean

jobs:
  set-environment:
    name: Set Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      namespace: ${{ steps.set-env.outputs.namespace }}
    
    steps:
      - name: Set environment based on branch or input
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual runs, use the provided input
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            # For push events, use the branch name
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              ENVIRONMENT="prod"
            elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
              ENVIRONMENT="staging"
            elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
              ENVIRONMENT="dev"
            else
              echo "Unsupported branch for deployment: ${{ github.ref }}"
              exit 1
            fi
          fi
          
          # Set environment and namespace
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "namespace=emcp-$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "Selected environment: $ENVIRONMENT"
          echo "Using namespace: emcp-$ENVIRONMENT"

  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      admin_changed: ${{ steps.check-folders.outputs.admin_changed }}
      backend_changed: ${{ steps.check-folders.outputs.backend_changed }}
      frontend_changed: ${{ steps.check-folders.outputs.frontend_changed }}
      redis_changed: ${{ steps.check-folders.outputs.redis_changed }}
      workflow_changed: ${{ steps.check-folders.outputs.workflow_changed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed for file comparison with previous commit
      
      - name: Check which folders changed
        id: check-folders
        run: |
          # For workflow_dispatch, use the input values
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Check if check_redis_only is true
            if [ "${{ github.event.inputs.check_redis_only }}" == "true" ]; then
              echo "admin_changed=false" >> $GITHUB_OUTPUT
              echo "backend_changed=false" >> $GITHUB_OUTPUT
              echo "frontend_changed=false" >> $GITHUB_OUTPUT
              echo "redis_changed=false" >> $GITHUB_OUTPUT
              echo "workflow_changed=true" >> $GITHUB_OUTPUT
            else
              echo "admin_changed=${{ github.event.inputs.deploy_admin }}" >> $GITHUB_OUTPUT
              echo "backend_changed=${{ github.event.inputs.deploy_backend }}" >> $GITHUB_OUTPUT
              echo "frontend_changed=${{ github.event.inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
              echo "redis_changed=${{ github.event.inputs.deploy_redis }}" >> $GITHUB_OUTPUT
              echo "workflow_changed=true" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi
          
          # For push events, check which files changed with precise logic
          # [This code remains the same as in the optimized workflow]
          # ...

  deploy-redis:
    name: Deploy Redis to EKS
    needs: [set-environment, check-changes]
    if: |
      always() && 
      (needs.check-changes.outputs.redis_changed == 'true' || 
       (needs.check-changes.outputs.workflow_changed == 'true' && 
        (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_redis == 'true' || github.event.inputs.check_redis_only == 'true')))
    uses: ./.github/workflows/deploy-redis.yml
    with:
      environment: ${{ needs.set-environment.outputs.environment }}
      namespace: ${{ needs.set-environment.outputs.namespace }}
      skip_deployment: ${{ github.event.inputs.deploy_redis == 'false' && github.event.inputs.check_redis_only != 'true' }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-admin:
    name: Deploy Admin to EKS
    needs: [set-environment, check-changes, deploy-redis]
    if: |
      always() && 
      needs.deploy-redis.result != 'skipped' &&
      (needs.check-changes.outputs.admin_changed == 'true' || 
       (needs.check-changes.outputs.workflow_changed == 'true' && 
        (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_admin == 'true'))) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.check_redis_only != 'true')
    uses: ./.github/workflows/deploy-admin.yml
    with:
      environment: ${{ needs.set-environment.outputs.environment }}
      namespace: ${{ needs.set-environment.outputs.namespace }}
      skip_deployment: ${{ github.event.inputs.deploy_admin == 'false' }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-backend:
    name: Deploy Backend to EKS
    needs: [set-environment, check-changes, deploy-redis, deploy-admin]
    if: |
      always() && 
      needs.deploy-redis.result != 'skipped' &&
      (needs.check-changes.outputs.backend_changed == 'true' || 
       (needs.check-changes.outputs.workflow_changed == 'true' && 
        (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_backend == 'true'))) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.check_redis_only != 'true')
    uses: ./.github/workflows/deploy-backend.yml
    with:
      environment: ${{ needs.set-environment.outputs.environment }}
      namespace: ${{ needs.set-environment.outputs.namespace }}
      skip_deployment: ${{ github.event.inputs.deploy_backend == 'false' }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-frontend:
    name: Deploy Frontend to EKS
    needs: [set-environment, check-changes, deploy-redis, deploy-backend]
    if: |
      always() && 
      needs.deploy-redis.result != 'skipped' &&
      (needs.check-changes.outputs.frontend_changed == 'true' || 
       (needs.check-changes.outputs.workflow_changed == 'true' && 
        (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_frontend == 'true'))) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.check_redis_only != 'true')
    uses: ./.github/workflows/deploy-frontend.yml
    with:
      environment: ${{ needs.set-environment.outputs.environment }}
      namespace: ${{ needs.set-environment.outputs.namespace }}
      skip_deployment: ${{ github.event.inputs.deploy_frontend == 'false' }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deployment-summary:
    name: Deployment Summary
    needs: [set-environment, deploy-redis, deploy-admin, deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      EKS_CLUSTER_NAME: emcp-eks-cluster
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Generate deployment summary
        run: |
          NAMESPACE="${{ needs.set-environment.outputs.namespace }}"
          ENVIRONMENT="${{ needs.set-environment.outputs.environment }}"
          
          echo "=== DEPLOYMENT SUMMARY FOR $ENVIRONMENT ($NAMESPACE) ==="
          echo ""
          
          echo "Redis: ${{ needs.deploy-redis.result }}"
          echo "Admin: ${{ needs.deploy-admin.result }}"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo ""
          
          echo "=== SERVICE STATUS ==="
          echo "REDIS: $(kubectl get statefulset redis -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not deployed')"
          echo "ADMIN: $(kubectl get statefulset admin -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not deployed')"
          echo "BACKEND: $(kubectl get statefulset backend -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not deployed')"
          echo "FRONTEND: $(kubectl get deployment frontend -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not deployed')"
          echo ""
          
          echo "=== POD STATUS ==="
          kubectl get pods -n $NAMESPACE
          
          echo ""
          echo "=== DEPLOYMENT COMPLETE ==="