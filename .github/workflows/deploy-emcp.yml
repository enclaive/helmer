name: Deploy to EKS

on:
  push:
    branches: [ main, staging, dev ]
    paths:
      - 'charts/admin/**'
      - 'charts/mongodb/**'
      - 'charts/redis/**'
      - '.github/workflows/deploy-emcp.yml'
  workflow_dispatch:
    inputs:
      deploy_all:
        description: 'Deploy all services'
        required: false
        default: true
        type: boolean
      specific_service:
        description: 'Specific service to deploy (leave empty for all)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: eu-central-1
  EKS_CLUSTER_NAME: emcp-eks-cluster
  # Use more specific image tags
  MONGODB_TAG: "5.0.2"
  REDIS_TAG: "6.2-alpine"

jobs:
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set environment based on branch or input
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.environment }}" ]]; then
            # For manual runs, use the provided input
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            # For push events, determine by branch
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              ENVIRONMENT="prod"
            elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
              ENVIRONMENT="staging"
            elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              ENVIRONMENT="dev"
            else
              # Default to dev for other branches
              ENVIRONMENT="dev"
            fi
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "namespace=emcp-$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "Selected environment: $ENVIRONMENT, namespace: emcp-$ENVIRONMENT"
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          # Ensure namespace exists
          kubectl create namespace ${{ steps.set-env.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
          
      - name: Configure Docker credentials for Helm
        run: |
          kubectl create secret docker-registry harbor-creds \
            --docker-server=harbor.enclaive.cloud \
            --docker-username=${{ secrets.HARBOR_USERNAME }} \
            --docker-password=${{ secrets.HARBOR_PASSWORD }} \
            --namespace=${{ steps.set-env.outputs.namespace }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Set deployment flags
        id: deployment-flags
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.deploy_all }}" == "false" && -n "${{ github.event.inputs.specific_service }}" ]]; then
            # Deploy specific service only
            if [[ "${{ github.event.inputs.specific_service }}" == "mongodb" ]]; then
              echo "deploy_mongodb=true" >> $GITHUB_OUTPUT
              echo "deploy_redis=false" >> $GITHUB_OUTPUT
              echo "deploy_admin=false" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.inputs.specific_service }}" == "redis" ]]; then
              echo "deploy_mongodb=false" >> $GITHUB_OUTPUT
              echo "deploy_redis=true" >> $GITHUB_OUTPUT
              echo "deploy_admin=false" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.inputs.specific_service }}" == "admin" ]]; then
              echo "deploy_mongodb=false" >> $GITHUB_OUTPUT
              echo "deploy_redis=false" >> $GITHUB_OUTPUT
              echo "deploy_admin=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_mongodb=true" >> $GITHUB_OUTPUT
              echo "deploy_redis=true" >> $GITHUB_OUTPUT
              echo "deploy_admin=true" >> $GITHUB_OUTPUT
            fi
          else
            # Deploy all
            echo "deploy_mongodb=true" >> $GITHUB_OUTPUT
            echo "deploy_redis=true" >> $GITHUB_OUTPUT
            echo "deploy_admin=true" >> $GITHUB_OUTPUT
          fi
          
          # Set image tag suffix based on environment
          if [[ "${{ steps.set-env.outputs.environment }}" == "prod" ]]; then
            echo "admin_tag_prefix=prod-" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.set-env.outputs.environment }}" == "staging" ]]; then
            echo "admin_tag_prefix=staging-" >> $GITHUB_OUTPUT
          else
            echo "admin_tag_prefix=dev-" >> $GITHUB_OUTPUT
          fi
        
      - name: Deploy MongoDB
        if: steps.deployment-flags.outputs.deploy_mongodb == 'true'
        run: |
          helm upgrade --install mongodb ./charts/mongodb \
            --namespace ${{ steps.set-env.outputs.namespace }} \
            --create-namespace \
            --values ./charts/mongodb/environments/values.${{ steps.set-env.outputs.environment }}.yaml \
            --set image.tag=${{ env.MONGODB_TAG }} \
            --atomic \
            --timeout 5m
            
      - name: Deploy Redis
        if: steps.deployment-flags.outputs.deploy_redis == 'true'
        run: |
          helm upgrade --install redis ./charts/redis \
            --namespace ${{ steps.set-env.outputs.namespace }} \
            --create-namespace \
            --values ./charts/redis/environments/values.${{ steps.set-env.outputs.environment }}.yaml \
            --set image.tag=${{ env.REDIS_TAG }} \
            --atomic \
            --timeout 5m
      
      - name: Deploy Admin
        if: steps.deployment-flags.outputs.deploy_admin == 'true'
        run: |
          helm upgrade --install admin ./charts/admin \
            --namespace ${{ steps.set-env.outputs.namespace }} \
            --create-namespace \
            --values ./charts/admin/environments/values.${{ steps.set-env.outputs.environment }}.yaml \
            --set image.tag=${{ steps.deployment-flags.outputs.admin_tag_prefix }}${{ github.sha }} \
            --atomic \
            --timeout 5m
      
      - name: Verify deployments
        run: |
          NAMESPACE="${{ steps.set-env.outputs.namespace }}"
          
          if [[ "${{ steps.deployment-flags.outputs.deploy_mongodb }}" == "true" ]]; then
            echo "Verifying MongoDB deployment..."
            kubectl rollout status statefulset/mongodb -n $NAMESPACE --timeout=300s
          fi
          
          if [[ "${{ steps.deployment-flags.outputs.deploy_redis }}" == "true" ]]; then
            echo "Verifying Redis deployment..."
            kubectl rollout status statefulset/redis -n $NAMESPACE --timeout=300s
          fi
          
          if [[ "${{ steps.deployment-flags.outputs.deploy_admin }}" == "true" ]]; then
            echo "Verifying Admin deployment..."
            kubectl rollout status statefulset/admin -n $NAMESPACE --timeout=300s
          fi
          
      - name: Report deployment status
        if: always()
        run: |
          NAMESPACE="${{ steps.set-env.outputs.namespace }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          
          echo "=== Deployment Status for $ENV environment ==="
          echo "MongoDB: $(kubectl get statefulset mongodb -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          echo "Redis: $(kubectl get statefulset redis -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          echo "Admin: $(kubectl get statefulset admin -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          
          echo "=== Pod Status ==="
          kubectl get pods -n $NAMESPACE -l app=mongodb
          kubectl get pods -n $NAMESPACE -l app=redis
          kubectl get pods -n $NAMESPACE -l app=admin
          
          echo "=== Service Status ==="
          kubectl get services -n $NAMESPACE
          
          # Display recent events
          echo "=== Recent Events ==="
          kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -n 20