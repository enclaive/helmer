name: Deploy to EKS

on:
  push:
    branches: [ main, dev, staging ]
    paths:
      - 'charts/admin/**'
      - 'charts/mongodb/**'
      - 'charts/redis/**'
      - '.github/workflows/deploy-emcp.yml'
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: eu-central-1
  EKS_CLUSTER_NAME: emcp-eks-cluster

jobs:
  set-environment:
    name: Set Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      namespace: ${{ steps.set-env.outputs.namespace }}
    
    steps:
      - name: Set environment based on branch or input
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual runs, use the provided input
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            # For push events, use the branch name
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              ENVIRONMENT="prod"
            elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
              ENVIRONMENT="staging"
            elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
              ENVIRONMENT="dev"
            else
              echo "Unsupported branch for deployment: ${{ github.ref }}"
              exit 1
            fi
          fi
          
          # Set environment and namespace
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "namespace=emcp-$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "Selected environment: $ENVIRONMENT"
          echo "Using namespace: emcp-$ENVIRONMENT"

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: set-environment
    environment: ${{ needs.set-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          # Add validation flag to bypass validation error temporarily
          kubectl create namespace ${{ needs.set-environment.outputs.namespace }} --dry-run=client -o yaml --validate=false | kubectl apply -f -
          
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
          
      # Harbor login using the docker/login-action to align with the other workflow
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.enclaive.cloud
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          
      # Create the Harbor credentials secret in Kubernetes
      - name: Create Harbor credentials secret in Kubernetes
        run: |
          # Create the secret
          kubectl create secret docker-registry harbor-creds \
            --docker-server=harbor.enclaive.cloud \
            --docker-username=${{ secrets.HARBOR_USERNAME }} \
            --docker-password=${{ secrets.HARBOR_PASSWORD }} \
            --namespace=${{ needs.set-environment.outputs.namespace }} \
            --dry-run=client -o yaml --validate=false | kubectl apply -f -
      
      - name: Set image tags based on environment
        id: set-tags
        run: |
          ENV="${{ needs.set-environment.outputs.environment }}"
          
          if [ "$ENV" == "prod" ]; then
            ADMIN_TAG="prod-${{ github.sha }}"
            MONGODB_TAG="5.0.2"
            REDIS_TAG="6.2-alpine"
          elif [ "$ENV" == "staging" ]; then
            ADMIN_TAG="staging-${{ github.sha }}"
            MONGODB_TAG="5.0.2"
            REDIS_TAG="6.2-alpine"
          elif [ "$ENV" == "dev" ]; then
            ADMIN_TAG="dev-${{ github.sha }}"
            MONGODB_TAG="5.0.2"
            REDIS_TAG="6.2-alpine"
          fi
          
          echo "admin_tag=$ADMIN_TAG" >> $GITHUB_OUTPUT
          echo "mongodb_tag=$MONGODB_TAG" >> $GITHUB_OUTPUT
          echo "redis_tag=$REDIS_TAG" >> $GITHUB_OUTPUT
          
          # Export tags as environment variables for the deployment scripts
          echo "ADMIN_TAG=$ADMIN_TAG" >> $GITHUB_ENV
          echo "MONGODB_TAG=$MONGODB_TAG" >> $GITHUB_ENV
          echo "REDIS_TAG=$REDIS_TAG" >> $GITHUB_ENV
        
      # Make the deployment scripts executable
      - name: Make deployment scripts executable
        run: |
          chmod +x k8s/*.sh
          
      # Run the appropriate deployment script based on the environment
      - name: Deploy to ${{ needs.set-environment.outputs.environment }}
        env:
          NAMESPACE: ${{ needs.set-environment.outputs.namespace }}
        run: |
          ENV="${{ needs.set-environment.outputs.environment }}"
          
          if [ "$ENV" == "prod" ]; then
            # Use the production deployment script
            k8s/prod.sh
          elif [ "$ENV" == "staging" ]; then
            # Use the staging deployment script
            k8s/staging.sh
          elif [ "$ENV" == "dev" ]; then
            # Use the development deployment script
            k8s/dev.sh
          fi
          
      - name: Verify deployments
        run: |
          NAMESPACE="${{ needs.set-environment.outputs.namespace }}"
          
          echo "Verifying MongoDB deployment..."
          kubectl rollout status statefulset/mongodb -n $NAMESPACE --timeout=300s || true
          
          echo "Verifying Redis deployment..."
          kubectl rollout status statefulset/redis -n $NAMESPACE --timeout=300s || true
          
          echo "Verifying Admin deployment..."
          kubectl rollout status statefulset/admin -n $NAMESPACE --timeout=300s || true
          
      - name: Report deployment status
        if: always()
        run: |
          NAMESPACE="${{ needs.set-environment.outputs.namespace }}"
          
          echo "=== Deployment Status for ${{ needs.set-environment.outputs.environment }} ==="
          echo "MongoDB: $(kubectl get statefulset mongodb -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          echo "Redis: $(kubectl get statefulset redis -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          echo "Admin: $(kubectl get statefulset admin -n $NAMESPACE -o jsonpath='{.status.readyReplicas}/{.status.replicas}' 2>/dev/null || echo 'Not found')"
          
          echo "=== Pod Status ==="
          kubectl get pods -n $NAMESPACE -l app=mongodb
          kubectl get pods -n $NAMESPACE -l app=redis
          kubectl get pods -n $NAMESPACE -l app=admin
          
          echo "=== Service Status ==="
          kubectl get services -n $NAMESPACE